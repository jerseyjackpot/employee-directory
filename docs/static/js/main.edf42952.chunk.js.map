{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Form","state","Name","Employee","Original","handleFirstNameSort","event","preventDefault","console","log","target","sortedlist","sort","employeeA","employeeB","name","first","setState","handleInputChange","value","filteredlist","filter","employee","toLowerCase","indexOf","axios","get","then","results","data","this","className","onChange","type","placeholder","Table","striped","bordered","hover","href","onClick","map","emp","index","key","last","email","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wRA4GeA,E,4MArGbC,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,SAAU,I,EAYZC,oBAAsB,SAAAC,GACpBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,QAClB,IAAIC,EAAU,YAAO,EAAKV,MAAME,UAChCQ,EAAaA,EAAWC,MAAM,SAACC,EAAWC,GACxC,OAAID,EAAUE,KAAKC,MAAQF,EAAUC,KAAKC,MACjC,GAED,KAEV,EAAMC,SAAS,CACbd,SAAUQ,K,EAIdO,kBAAoB,SAAAZ,GAAS,MAGHA,EAAMI,OAAhBS,GAHa,EAGnBJ,KAHmB,EAGbI,OAEdX,QAAQC,IAAIH,EAAMI,QAClB,IAAIU,EAAY,YAAO,EAAKnB,MAAMG,UAClCgB,EAAeA,EAAaC,QAAQ,SAACC,GACnC,OAAOA,EAASP,KAAKC,MAAMO,cAAcC,QAAQL,EAAMI,gBAAiB,KAQ1E,EAAKN,SAAS,CACZf,KAAMiB,EACNhB,SAAUiB,K,kEA1CO,IAAD,OAClBK,IAAMC,IAAI,iDAAiDC,MAAK,SAAAC,GAC9D,EAAKX,SAAS,CACZd,SAAUyB,EAAQC,KAAKD,QACvBxB,SAAUwB,EAAQC,KAAKD,e,+BA0CnB,IAAD,OAIP,OAFApB,QAAQC,IAAIqB,KAAK7B,MAAME,UAGrB,6BACE,oDAGA,0BAAM4B,UAAU,QACd,2BACEZ,MAAOW,KAAK7B,MAAMC,KAClBa,KAAK,OACLiB,SAAUF,KAAKZ,kBACfe,KAAK,OACLC,YAAY,UAIhB,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACnC,+BACE,4BACE,kCACA,gCAAK,uBAAGC,KAAK,IAAIC,QAAS,SAAClC,GAAD,OACxB,EAAKD,oBAAoBC,KADtB,eAGL,yCACA,uCAGJ,+BACCwB,KAAK7B,MAAME,SAASsC,KAAI,SAACC,EAAKC,GAAN,OACf,wBAAIC,IAAKD,GACP,4BAAKA,GACL,4BAAKD,EAAI3B,KAAKC,OACd,4BAAK0B,EAAI3B,KAAK8B,MACd,4BAAKH,EAAII,kB,GA1FJC,aCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.edf42952.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport bootstrap, { Table } from \"react-bootstrap\";\n\n\nclass Form extends Component {\n  // Setting the component's initial state\n  state = {\n    Name: \"\",\n    Employee: [],\n    Original: []\n  };\n\n  componentDidMount() {\n    axios.get(\"https://randomuser.me/api/?results=100&nat=us\").then(results => {\n      this.setState({\n        Employee: results.data.results,\n        Original: results.data.results,\n      })\n    })\n  }\n\n  handleFirstNameSort = event => {\n    event.preventDefault();\n    console.log(event.target);\n    let sortedlist = [...this.state.Employee];\n    sortedlist = sortedlist.sort( (employeeA, employeeB) => {\n      if( employeeA.name.first > employeeB.name.first){\n        return 1;\n      }\n      return -1;\n    });\n    this. setState({\n      Employee: sortedlist\n    })\n  }\n\n  handleInputChange = event => {\n\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    console.log(event.target);\n    let filteredlist = [...this.state.Original];\n    filteredlist = filteredlist.filter( (employee) => {\n      return employee.name.first.toLowerCase().indexOf(value.toLowerCase()) >=0;\n    });\n    // // /this. setState({\n    //   Employee: sortedlist\n    // })\n\n\n    // Updating the input's state\n    this.setState({\n      Name: value, \n      Employee: filteredlist\n    });\n  };\n\n  render() {\n    // Notice how each input has a `value`, `name`, and `onChange` prop\n    console.log(this.state.Employee);\n\n    return (\n      <div>\n        <p>\n          Find Employee By Name\n        </p>\n        <form className=\"form\">\n          <input\n            value={this.state.Name}\n            name=\"Name\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Name\"\n          />\n        </form>\n\n        <Table striped bordered hover>\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th> <a href=\"#\" onClick={(event) => \n        this.handleFirstNameSort(event)\n        }>First Name</a></th>\n      <th>Last Name</th>\n      <th>Email</th>\n    </tr>\n  </thead>\n  <tbody>\n  {this.state.Employee.map((emp, index) => (\n            <tr key={index}>\n              <td>{index}</td>\n              <td>{emp.name.first}</td> \n              <td>{emp.name.last}</td>\n              <td>{emp.email}</td> \n              \n            </tr>\n          ))}\n  </tbody>\n</Table>\n       \n\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}